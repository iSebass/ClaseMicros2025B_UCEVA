
CLASE_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800128  00800128  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a6  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a7  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bb  00000000  00000000  00002021  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000027dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000554  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079c  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  9e:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_write_nibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	80 fd       	sbrc	r24, 0
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <_write_nibble+0xc>
  aa:	9b b1       	in	r25, 0x0b	; 11
  ac:	9f 7e       	andi	r25, 0xEF	; 239
  ae:	9b b9       	out	0x0b, r25	; 11
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <_write_nibble+0x12>
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	90 61       	ori	r25, 0x10	; 16
  b6:	9b b9       	out	0x0b, r25	; 11
  b8:	81 fd       	sbrc	r24, 1
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <_write_nibble+0x1e>
  bc:	9b b1       	in	r25, 0x0b	; 11
  be:	9f 7d       	andi	r25, 0xDF	; 223
  c0:	9b b9       	out	0x0b, r25	; 11
  c2:	03 c0       	rjmp	.+6      	; 0xca <_write_nibble+0x24>
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	90 62       	ori	r25, 0x20	; 32
  c8:	9b b9       	out	0x0b, r25	; 11
  ca:	82 fd       	sbrc	r24, 2
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <_write_nibble+0x30>
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	9f 7b       	andi	r25, 0xBF	; 191
  d2:	9b b9       	out	0x0b, r25	; 11
  d4:	03 c0       	rjmp	.+6      	; 0xdc <_write_nibble+0x36>
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 64       	ori	r25, 0x40	; 64
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	83 fd       	sbrc	r24, 3
  de:	04 c0       	rjmp	.+8      	; 0xe8 <_write_nibble+0x42>
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 77       	andi	r24, 0x7F	; 127
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	03 c0       	rjmp	.+6      	; 0xee <_write_nibble+0x48>
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	87 7f       	andi	r24, 0xF7	; 247
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	8f ea       	ldi	r24, 0xAF	; 175
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <_write_nibble+0x5e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_write_nibble+0x64>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <_send_byte>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	66 23       	and	r22, r22
 114:	19 f0       	breq	.+6      	; 0x11c <_send_byte+0xe>
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	29 f0       	breq	.+10     	; 0x124 <_send_byte+0x16>
 11a:	07 c0       	rjmp	.+14     	; 0x12a <_send_byte+0x1c>
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	8b b9       	out	0x0b, r24	; 11
 122:	03 c0       	rjmp	.+6      	; 0x12a <_send_byte+0x1c>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	84 60       	ori	r24, 0x04	; 4
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	8c 2f       	mov	r24, r28
 12c:	82 95       	swap	r24
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 134:	8c 2f       	mov	r24, r28
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcd_write>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 87 00 	call	0x10e	; 0x10e <_send_byte>
 146:	08 95       	ret

00000148 <lcd_command>:
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	0e 94 87 00 	call	0x10e	; 0x10e <_send_byte>
 14e:	08 95       	ret

00000150 <lcd_init>:
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	8c 6f       	ori	r24, 0xFC	; 252
 154:	8a b9       	out	0x0a, r24	; 10
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	83 70       	andi	r24, 0x03	; 3
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	8f e5       	ldi	r24, 0x5F	; 95
 15e:	9a ee       	ldi	r25, 0xEA	; 234
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_init+0x10>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_init+0x16>
 166:	00 00       	nop
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 16e:	8f e0       	ldi	r24, 0x0F	; 15
 170:	90 e4       	ldi	r25, 0x40	; 64
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x22>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x28>
 178:	00 00       	nop
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 180:	8f e8       	ldi	r24, 0x8F	; 143
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0x34>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x3a>
 18a:	00 00       	nop
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_nibble>
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 19e:	95 ec       	ldi	r25, 0xC5	; 197
 1a0:	9a 95       	dec	r25
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x50>
 1a4:	00 00       	nop
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 1ac:	8f e0       	ldi	r24, 0x0F	; 15
 1ae:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1b2:	85 ec       	ldi	r24, 0xC5	; 197
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x64>
 1b8:	00 00       	nop
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9f e1       	ldi	r25, 0x1F	; 31
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x74>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x7a>
 1ca:	00 00       	nop
 1cc:	08 95       	ret

000001ce <lcd_puts>:
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <lcd_puts+0xe>
 1d6:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	88 81       	ld	r24, Y
 1de:	81 11       	cpse	r24, r1
 1e0:	fa cf       	rjmp	.-12     	; 0x1d6 <lcd_puts+0x8>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_set_cursor>:
 1e8:	e8 2f       	mov	r30, r24
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e1 5f       	subi	r30, 0xF1	; 241
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	80 81       	ld	r24, Z
 1f2:	86 0f       	add	r24, r22
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1fc:	08 95       	ret

000001fe <lcd_disable_blink>:
 1fe:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 208:	88 60       	ori	r24, 0x08	; 8
 20a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 20e:	85 ec       	ldi	r24, 0xC5	; 197
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_disable_blink+0x12>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <lcd_disable_cursor>:
 218:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 21c:	8d 7f       	andi	r24, 0xFD	; 253
 21e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 222:	88 60       	ori	r24, 0x08	; 8
 224:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 228:	85 ec       	ldi	r24, 0xC5	; 197
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_disable_cursor+0x12>
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <lcd_custom_char>:
void lcd_scroll_right(void){
	 lcd_command(_LCD_CURSORDISPLAYSHIFT | _LCD_DISPLAY_SHIFT | _LCD_MOVERIGHT);
	 _delay_us(37);
}

void lcd_custom_char(uint8_t mem, uint8_t *charmap){
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	8b 01       	movw	r16, r22
	lcd_command(_LCD_SET_CGRAM_ADDR |  ((mem&0x07)<<3) );
 23a:	87 70       	andi	r24, 0x07	; 7
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	for(uint8_t i=0; i<=7; i++){
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	07 c0       	rjmp	.+14     	; 0x262 <lcd_custom_char+0x30>
		lcd_write(charmap[i]);
 254:	f8 01       	movw	r30, r16
 256:	ec 0f       	add	r30, r28
 258:	f1 1d       	adc	r31, r1
 25a:	80 81       	ld	r24, Z
 25c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
	 _delay_us(37);
}

void lcd_custom_char(uint8_t mem, uint8_t *charmap){
	lcd_command(_LCD_SET_CGRAM_ADDR |  ((mem&0x07)<<3) );
	for(uint8_t i=0; i<=7; i++){
 260:	cf 5f       	subi	r28, 0xFF	; 255
 262:	c8 30       	cpi	r28, 0x08	; 8
 264:	b8 f3       	brcs	.-18     	; 0x254 <lcd_custom_char+0x22>
		lcd_write(charmap[i]);
	}
	lcd_command(_LCD_SET_DDRAM_ADDR);
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 26c:	85 ec       	ldi	r24, 0xC5	; 197
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_custom_char+0x3c>
 272:	00 00       	nop
	_delay_us(37);
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <main>:
};


int main(void)
{
    lcd_init();
 27c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_init>
	
	lcd_disable_blink();
 280:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_disable_blink>
	lcd_disable_cursor();
 284:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_disable_cursor>
	
	lcd_custom_char(1,customChar);
 288:	68 e0       	ldi	r22, 0x08	; 8
 28a:	71 e0       	ldi	r23, 0x01	; 1
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_custom_char>
	lcd_custom_char(2,customChar2);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	71 e0       	ldi	r23, 0x01	; 1
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 19 01 	call	0x232	; 0x232 <lcd_custom_char>
	
	lcd_set_cursor(3,5);
 29c:	65 e0       	ldi	r22, 0x05	; 5
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_set_cursor>
	lcd_write(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>
	lcd_write(2);
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write>

    while (1) 
    {
		lcd_set_cursor(1,1);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_set_cursor>
		lcd_puts("Arlin la saca toda");
 2b8:	84 e1       	ldi	r24, 0x14	; 20
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	89 e6       	ldi	r24, 0x69	; 105
 2c4:	98 e1       	ldi	r25, 0x18	; 24
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x4a>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x54>
 2d0:	00 00       	nop
 2d2:	ee cf       	rjmp	.-36     	; 0x2b0 <main+0x34>

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
