
Ejercicio02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001ce  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a61  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cd  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f2  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  00001f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ff7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	82 c0       	rjmp	.+260    	; 0x1ca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

int numa=10, numb=5, result=0;

int main(void)
{
    diplayInit();
  c8:	4d d0       	rcall	.+154    	; 0x164 <diplayInit>
	
	DDRC = 0x00;
  ca:	17 b8       	out	0x07, r1	; 7
	DDRA &= ~( (1<<PINA0)|(1<<PINA1) );
  cc:	81 b1       	in	r24, 0x01	; 1
  ce:	8c 7f       	andi	r24, 0xFC	; 252
  d0:	81 b9       	out	0x01, r24	; 1
	DDRB |=  ( (1<<PINB0)|(1<<PINB1) );
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	84 b9       	out	0x04, r24	; 4
	
    while (1) 
    {
		numa = (PINC & 0x0F)>>0;
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <numa+0x1>
  e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <numa>
		numb = (PINC & 0xF0)>>4;
  e6:	26 b1       	in	r18, 0x06	; 6
  e8:	22 95       	swap	r18
  ea:	2f 70       	andi	r18, 0x0F	; 15
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if( (PINA&(1<<PINA0)) !=0  && (PINA&(1<<PINA1)) == 0 ){
  f6:	00 9b       	sbis	0x00, 0	; 0
  f8:	09 c0       	rjmp	.+18     	; 0x10c <main+0x44>
  fa:	01 99       	sbic	0x00, 1	; 0
  fc:	07 c0       	rjmp	.+14     	; 0x10c <main+0x44>
			result = numa + numb;
  fe:	ac 01       	movw	r20, r24
 100:	42 0f       	add	r20, r18
 102:	53 1f       	adc	r21, r19
 104:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <__data_end+0x1>
 108:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <__data_end>
		}
		if( (PINA&(1<<PINA1)) !=0  && (PINA&(1<<PINA0)) == 0 ){
 10c:	01 9b       	sbis	0x00, 1	; 0
 10e:	08 c0       	rjmp	.+16     	; 0x120 <main+0x58>
 110:	00 99       	sbic	0x00, 0	; 0
 112:	06 c0       	rjmp	.+12     	; 0x120 <main+0x58>
			result = numa - numb;
 114:	82 1b       	sub	r24, r18
 116:	93 0b       	sbc	r25, r19
 118:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 11c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		}
		PORTB = DP_DECENAS;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	85 b9       	out	0x05, r24	; 5
		displayDecoCC( result/10 );
 124:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 128:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 12c:	ca e0       	ldi	r28, 0x0A	; 10
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	be 01       	movw	r22, r28
 132:	24 d0       	rcall	.+72     	; 0x17c <__divmodhi4>
 134:	86 2f       	mov	r24, r22
 136:	19 d0       	rcall	.+50     	; 0x16a <displayDecoCC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e4       	ldi	r24, 0x4F	; 79
 13a:	93 ec       	ldi	r25, 0xC3	; 195
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x74>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x7a>
 142:	00 00       	nop
		_delay_ms(10);
		
		PORTB = DP_UNIDADES;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	85 b9       	out	0x05, r24	; 5
		displayDecoCC( result%10 );
 148:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 14c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 150:	be 01       	movw	r22, r28
 152:	14 d0       	rcall	.+40     	; 0x17c <__divmodhi4>
 154:	0a d0       	rcall	.+20     	; 0x16a <displayDecoCC>
 156:	8f e4       	ldi	r24, 0x4F	; 79
 158:	93 ec       	ldi	r25, 0xC3	; 195
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x92>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x98>
 160:	00 00       	nop
 162:	ba cf       	rjmp	.-140    	; 0xd8 <main+0x10>

00000164 <diplayInit>:
char decoCC[10]={191, 134, 219, 207, 230, 237, 253, 135, 255, 231};
char decoAC[10]={64, 121, 36, 48, 25, 18, 2, 120, 0, 24};


void diplayInit(){
	DDR_DISPLAY = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	8a b9       	out	0x0a, r24	; 10
 168:	08 95       	ret

0000016a <displayDecoCC>:
}
void displayDecoCC( unsigned char digito ){
	 if(digito>9) return;
 16a:	8a 30       	cpi	r24, 0x0A	; 10
 16c:	30 f4       	brcc	.+12     	; 0x17a <displayDecoCC+0x10>
	 PORT_DISPLAY = decoCC[digito];
 16e:	e8 2f       	mov	r30, r24
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ec 5f       	subi	r30, 0xFC	; 252
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	80 81       	ld	r24, Z
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	08 95       	ret

0000017c <__divmodhi4>:
 17c:	97 fb       	bst	r25, 7
 17e:	07 2e       	mov	r0, r23
 180:	16 f4       	brtc	.+4      	; 0x186 <__divmodhi4+0xa>
 182:	00 94       	com	r0
 184:	06 d0       	rcall	.+12     	; 0x192 <__divmodhi4_neg1>
 186:	77 fd       	sbrc	r23, 7
 188:	08 d0       	rcall	.+16     	; 0x19a <__divmodhi4_neg2>
 18a:	0b d0       	rcall	.+22     	; 0x1a2 <__udivmodhi4>
 18c:	07 fc       	sbrc	r0, 7
 18e:	05 d0       	rcall	.+10     	; 0x19a <__divmodhi4_neg2>
 190:	3e f4       	brtc	.+14     	; 0x1a0 <__divmodhi4_exit>

00000192 <__divmodhi4_neg1>:
 192:	90 95       	com	r25
 194:	81 95       	neg	r24
 196:	9f 4f       	sbci	r25, 0xFF	; 255
 198:	08 95       	ret

0000019a <__divmodhi4_neg2>:
 19a:	70 95       	com	r23
 19c:	61 95       	neg	r22
 19e:	7f 4f       	sbci	r23, 0xFF	; 255

000001a0 <__divmodhi4_exit>:
 1a0:	08 95       	ret

000001a2 <__udivmodhi4>:
 1a2:	aa 1b       	sub	r26, r26
 1a4:	bb 1b       	sub	r27, r27
 1a6:	51 e1       	ldi	r21, 0x11	; 17
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <__udivmodhi4_ep>

000001aa <__udivmodhi4_loop>:
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	a6 17       	cp	r26, r22
 1b0:	b7 07       	cpc	r27, r23
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <__udivmodhi4_ep>
 1b4:	a6 1b       	sub	r26, r22
 1b6:	b7 0b       	sbc	r27, r23

000001b8 <__udivmodhi4_ep>:
 1b8:	88 1f       	adc	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	5a 95       	dec	r21
 1be:	a9 f7       	brne	.-22     	; 0x1aa <__udivmodhi4_loop>
 1c0:	80 95       	com	r24
 1c2:	90 95       	com	r25
 1c4:	bc 01       	movw	r22, r24
 1c6:	cd 01       	movw	r24, r26
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
