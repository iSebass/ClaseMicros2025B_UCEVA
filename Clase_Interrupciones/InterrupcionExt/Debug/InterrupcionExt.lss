
InterrupcionExt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000770  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002de  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000db  00000000  00000000  000017e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_1>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main(void){
	
	//CARGAMOS EL CALOR DEL PIN
	 old_value = (PINC & (1<<PINC0) ) == 1 ? 1: 0;
  90:	86 b1       	in	r24, 0x06	; 6
  92:	81 70       	andi	r24, 0x01	; 1
  94:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <old_value>
    
	//CONFIGURAMOS LAS ENTRADAS Y SALIDAS DIGITALES
	DDRD &= ~( (1<<PIND2)|(1<<PIND3) );
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	83 7f       	andi	r24, 0xF3	; 243
  9c:	8a b9       	out	0x0a, r24	; 10
	DDRB |=  (1<<PINB0)|(1<<PINB1)|(1<<PINB2);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	84 b9       	out	0x04, r24	; 4
	
	//CONFIGRUAR LA INTERRUPCION
	// INT0 e INT1
	
	//CONFIGRUAR LA SENSIBILIDAD
	EICRA |= ( (1<<ISC00) | (1<<ISC01)  );  //FLANCOS DE SUBIDA
  a4:	e9 e6       	ldi	r30, 0x69	; 105
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	80 83       	st	Z, r24
	EICRA |= ( (1<<ISC11) | (1<<ISC10)  );
  ae:	80 81       	ld	r24, Z
  b0:	8c 60       	ori	r24, 0x0C	; 12
  b2:	80 83       	st	Z, r24
	
	//HABILITAR LAS INTERRUCPIONES INT0 E INT1
	EIMSK |= ( (1<<INT0) | (1<<INT1) );
  b4:	8d b3       	in	r24, 0x1d	; 29
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	8d bb       	out	0x1d, r24	; 29
	
	/*CONFIGURAMOS LAS INTERRUPCIONES POR CAMBIO DE ESTADO*/
	PCICR |= (1<<PCIE1);
  ba:	e8 e6       	ldi	r30, 0x68	; 104
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
	
	//HABILITAMOS LAS MASCARAS DE PCINT1
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9);
  c4:	ec e6       	ldi	r30, 0x6C	; 108
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	80 83       	st	Z, r24
	
	
	//HABILITAR LAS INTERRUPCIONES GLOBALES
	sei();
  ce:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	87 ea       	ldi	r24, 0xA7	; 167
  d4:	91 e6       	ldi	r25, 0x61	; 97
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x46>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x50>
  e0:	00 00       	nop
  e2:	f6 cf       	rjmp	.-20     	; 0xd0 <main+0x40>

000000e4 <__vector_1>:
		
		
    }
}

ISR(INT0_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	PORTB ^=  (1<<PINB0);
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	89 27       	eor	r24, r25
  f8:	85 b9       	out	0x05, r24	; 5
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_2>:
ISR(INT1_vect){
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	PORTB ^=  (1<<PINB1);
 116:	95 b1       	in	r25, 0x05	; 5
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	89 27       	eor	r24, r25
 11c:	85 b9       	out	0x05, r24	; 5
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_4>:

ISR(PCINT1_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	current_value = (PINC & (1<<PINC0) ) == 1 ? 1: 0;
 13a:	86 b1       	in	r24, 0x06	; 6
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if( current_value != old_value ){
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <old_value>
 146:	89 17       	cp	r24, r25
 148:	41 f0       	breq	.+16     	; 0x15a <__vector_4+0x2e>
		PORTB ^=  (1<<PINB2);
 14a:	95 b1       	in	r25, 0x05	; 5
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	89 27       	eor	r24, r25
 150:	85 b9       	out	0x05, r24	; 5
		old_value = current_value;
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <old_value>
	}
	
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
