
InterrupcionExt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000021c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000782  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002df  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f4  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000193d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_1>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	//lcd_init();
	//lcd_disable_cursor();
	//lcd_disable_blink();
		
	//CARGAMOS EL CALOR DEL PIN
	 old_value = (PINC & (1<<PINC0) ) == 1 ? 1: 0;
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	81 70       	andi	r24, 0x01	; 1
  aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <old_value>
    
	//CONFIGURAMOS LAS ENTRADAS Y SALIDAS DIGITALES
	DDRD &= ~( (1<<PIND2)|(1<<PIND3) );
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	83 7f       	andi	r24, 0xF3	; 243
  b2:	8a b9       	out	0x0a, r24	; 10
	DDRB |=  (1<<PINB0)|(1<<PINB1)|(1<<PINB2);
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	84 b9       	out	0x04, r24	; 4
	
	//CONFIGRUAR LA INTERRUPCION
	// INT0 e INT1
	
	//CONFIGRUAR LA SENSIBILIDAD
	EICRA |= ( (1<<ISC00) | (1<<ISC01)  );  //FLANCOS DE SUBIDA
  ba:	e9 e6       	ldi	r30, 0x69	; 105
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	80 83       	st	Z, r24
	EICRA |= ( (1<<ISC11) | (1<<ISC10)  );
  c4:	80 81       	ld	r24, Z
  c6:	8c 60       	ori	r24, 0x0C	; 12
  c8:	80 83       	st	Z, r24
	
	//HABILITAR LAS INTERRUCPIONES INT0 E INT1
	EIMSK |= ( (1<<INT0) | (1<<INT1) );
  ca:	8d b3       	in	r24, 0x1d	; 29
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	8d bb       	out	0x1d, r24	; 29
	
	/*CONFIGURAMOS LAS INTERRUPCIONES POR CAMBIO DE ESTADO*/
	PCICR |= (1<<PCIE1);
  d0:	e8 e6       	ldi	r30, 0x68	; 104
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
	
	//HABILITAMOS LAS MASCARAS DE PCINT1
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9);
  da:	ec e6       	ldi	r30, 0x6C	; 108
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	83 60       	ori	r24, 0x03	; 3
  e2:	80 83       	st	Z, r24
	
	
	//HABILITAR LAS INTERRUPCIONES GLOBALES
	sei();
  e4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x46>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x50>
  f6:	00 00       	nop
  f8:	f6 cf       	rjmp	.-20     	; 0xe6 <main+0x40>

000000fa <__vector_1>:
		
		
    }
}

ISR(INT0_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
	freq++;
 10c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <freq>
 110:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq+0x1>
 114:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <freq+0x2>
 118:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <freq+0x3>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	a1 1d       	adc	r26, r1
 120:	b1 1d       	adc	r27, r1
 122:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <freq>
 126:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <freq+0x1>
 12a:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <freq+0x2>
 12e:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <freq+0x3>
}
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_2>:
ISR(INT1_vect){
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
	PORTB ^=  (1<<PINB1);
 152:	95 b1       	in	r25, 0x05	; 5
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	89 27       	eor	r24, r25
 158:	85 b9       	out	0x05, r24	; 5
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_4>:

ISR(PCINT1_vect){
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
	current_value = (PINC & (1<<PINC0) ) == 1 ? 1: 0;
 176:	86 b1       	in	r24, 0x06	; 6
 178:	81 70       	andi	r24, 0x01	; 1
 17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if( current_value != old_value ){
 17e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <old_value>
 182:	89 17       	cp	r24, r25
 184:	41 f0       	breq	.+16     	; 0x196 <__vector_4+0x2e>
		PORTB ^=  (1<<PINB2);
 186:	95 b1       	in	r25, 0x05	; 5
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	89 27       	eor	r24, r25
 18c:	85 b9       	out	0x05, r24	; 5
		old_value = current_value;
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <old_value>
	}
	
}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
